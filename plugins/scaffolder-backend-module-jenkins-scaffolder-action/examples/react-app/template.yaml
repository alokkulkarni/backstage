apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: react-app-with-jenkins
  title: React Application with Jenkins CI/CD
  description: Creates a React application with comprehensive Jenkins pipeline setup for build, test, and deployment
  tags:
    - react
    - nodejs
    - jenkins
    - docker
    - recommended
spec:
  owner: platform-team
  type: website
  
  parameters:
    - title: Basic Information
      required:
        - name
        - description
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          pattern: '^([a-z0-9\-])+$'
          ui:autofocus: true
          ui:help: 'Name must be lowercase with hyphens only'
        description:
          title: Description
          type: string
          description: Help others understand what this component is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: Group

    - title: Repository Information
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
              - gitlab.com
              - bitbucket.org

    - title: Jenkins Configuration
      required:
        - enableJenkins
      properties:
        enableJenkins:
          title: Enable Jenkins CI/CD
          type: boolean
          default: true
          description: Create Jenkins pipeline jobs for this component
        jenkinsJobDescription:
          title: Jenkins Job Description
          type: string
          default: 'CI/CD pipeline for React application'
          description: Description for the Jenkins jobs
        dockerRegistry:
          title: Docker Registry
          type: string
          default: 'your-registry.com'
          description: Docker registry for image publishing
        kubernetesNamespace:
          title: Kubernetes Namespace
          type: string
          default: 'default'
          description: Target Kubernetes namespace for deployment

  steps:
    - id: fetch
      name: Fetch Base
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutTemplating:
          - .github/workflows/*
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          owner: ${{ parameters.owner }}
          dockerRegistry: ${{ parameters.dockerRegistry }}
          kubernetesNamespace: ${{ parameters.kubernetesNamespace }}

    # IMPORTANT: Create Jenkins jobs BEFORE publishing to GitHub
    # This ensures skeleton files are still available in the workspace
    - id: jenkins-jobs
      name: Create Jenkins Jobs
      if: ${{ parameters.enableJenkins }}
      action: jenkins:create-job
      input:
        artifactId: ${{ parameters.name }}
        skeletonPath: ./skeleton
        description: ${{ parameters.jenkinsJobDescription }}
        parameters:
          DOCKER_REGISTRY: ${{ parameters.dockerRegistry }}
          K8S_NAMESPACE: ${{ parameters.kubernetesNamespace }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: main
        gitCommitMessage: 'Initial commit for ${{ parameters.name }}'
        gitAuthorName: 'Backstage Scaffolder'
        gitAuthorEmail: 'scaffolder@backstage.io'

    # Now that the repository is published, we can pass the repo URL to jobs
    - id: jenkins-jobs-update
      name: Update Jenkins Jobs with Repository URL
      if: ${{ parameters.enableJenkins }}
      action: jenkins:execute-job
      input:
        jobName: ${{ parameters.name }}
        parameters:
          GIT_REPO_URL: ${{ steps.publish.output.remoteUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
      - title: Jenkins Jobs
        url: ${{ steps.jenkins-jobs.output.createdJobs[0].url if parameters.enableJenkins }}
