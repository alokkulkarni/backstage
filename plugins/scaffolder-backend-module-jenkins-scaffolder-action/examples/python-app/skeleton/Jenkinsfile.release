#!/usr/bin/env groovy

/**
 * Jenkins Release Pipeline for Python Application
 * 
 * This pipeline provides comprehensive release and deployment capabilities including:
 * - Multi-environment deployment (dev, staging, prod)
 * - Blue-green and canary deployment strategies
 * - Pre and post-deployment health checks
 * - Database migrations (Django/SQLAlchemy)
 * - Service mesh integration
 * - Automated rollback on failure
 * - Performance testing and monitoring
 */

pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: python
    image: python:${{ values.pythonVersion }}-slim
    command:
    - cat
    tty: true
  - name: kubectl
    image: bitnami/kubectl:latest
    command:
    - cat
    tty: true
  - name: helm
    image: alpine/helm:latest
    command:
    - cat
    tty: true
  - name: docker
    image: docker:24-alpine
    command:
    - cat
    tty: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
"""
        }
    }

    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: [{% for env in values.environments %}'${{ env }}'{% if not loop.last %}, {% endif %}{% endfor %}],
            description: 'Target environment for deployment'
        )
        choice(
            name: 'DEPLOYMENT_STRATEGY',
            choices: ['{{ "blue-green" if values.enableBlueGreen else "rolling" }}', 'canary', 'rolling'],
            description: 'Deployment strategy to use'
        )
        string(
            name: 'IMAGE_TAG',
            defaultValue: 'latest',
            description: 'Docker image tag to deploy'
        )
        booleanParam(
            name: 'RUN_MIGRATIONS',
            defaultValue: {% if values.includeDatabase %}true{% else %}false{% endif %},
            description: 'Run database migrations'
        )
        booleanParam(
            name: 'RUN_PERFORMANCE_TESTS',
            defaultValue: false,
            description: 'Run performance tests after deployment'
        )
        booleanParam(
            name: 'SKIP_HEALTH_CHECKS',
            defaultValue: false,
            description: 'Skip health checks (not recommended for production)'
        )
        string(
            name: 'ROLLBACK_VERSION',
            defaultValue: '',
            description: 'Version to rollback to (if specified, will perform rollback instead of deployment)'
        )
    }

    environment {
        // Application Configuration
        APP_NAME = '${{ values.name }}'
        PYTHON_VERSION = '${{ values.pythonVersion }}'
        FRAMEWORK = '${{ values.framework }}'
        
        // Build Information
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        RELEASE_TAG = "release-${env.BUILD_NUMBER}"
        
        // Docker Configuration
        {% if values.enableDocker %}
        DOCKER_REGISTRY = '${{ values.dockerRegistry | default("docker.company.com") }}'
        DOCKER_NAMESPACE = '${{ values.dockerNamespace | default("apps") }}'
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/${APP_NAME}"
        {% endif %}
        
        // Kubernetes Configuration
        {% if values.enableKubernetes %}
        K8S_NAMESPACE = '${{ values.kubernetesNamespace | default("default") }}'
        K8S_CLUSTER_DEV = 'dev-cluster'
        K8S_CLUSTER_STAGING = 'staging-cluster'
        K8S_CLUSTER_PROD = 'prod-cluster'
        {% endif %}
        
        // Health Check Configuration
        HEALTH_CHECK_PATH = '${{ values.healthCheckPath | default("/health") }}'
        HEALTH_CHECK_TIMEOUT = '300'
        HEALTH_CHECK_INTERVAL = '10'
        
        // Performance Test Configuration
        PERFORMANCE_TEST_DURATION = '300s'
        PERFORMANCE_TEST_USERS = '50'
        
        // Database Configuration
        {% if values.includeDatabase %}
        DB_MIGRATION_TIMEOUT = '600'
        {% endif %}
        
        // Monitoring Configuration
        {% if values.enablePrometheus %}
        PROMETHEUS_NAMESPACE = 'monitoring'
        {% endif %}
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '50'))
        timeout(time: 2, unit: 'HOURS')
        retry(1)
        skipStagesAfterUnstable()
        disableConcurrentBuilds()
    }

    stages {
        stage('Pre-Release Validation') {
            steps {
                script {
                    echo "üîç Validating release parameters"
                    
                    // Validate environment
                    if (!params.ENVIRONMENT) {
                        error("Environment must be specified")
                    }
                    
                    // Validate image tag
                    if (!params.IMAGE_TAG) {
                        error("Image tag must be specified")
                    }
                    
                    // Check if this is a rollback operation
                    if (params.ROLLBACK_VERSION) {
                        echo "‚ö†Ô∏è ROLLBACK MODE: Rolling back to version ${params.ROLLBACK_VERSION}"
                        env.IS_ROLLBACK = 'true'
                        env.TARGET_VERSION = params.ROLLBACK_VERSION
                    } else {
                        echo "üöÄ DEPLOYMENT MODE: Deploying version ${params.IMAGE_TAG}"
                        env.IS_ROLLBACK = 'false'
                        env.TARGET_VERSION = params.IMAGE_TAG
                    }
                    
                    // Set environment-specific variables
                    script {
                        switch(params.ENVIRONMENT) {
                            case 'dev':
                                env.K8S_CLUSTER = env.K8S_CLUSTER_DEV
                                env.APP_REPLICAS = '1'
                                env.RESOURCE_LIMITS_CPU = '500m'
                                env.RESOURCE_LIMITS_MEMORY = '512Mi'
                                break
                            case 'staging':
                                env.K8S_CLUSTER = env.K8S_CLUSTER_STAGING
                                env.APP_REPLICAS = '2'
                                env.RESOURCE_LIMITS_CPU = '1000m'
                                env.RESOURCE_LIMITS_MEMORY = '1Gi'
                                break
                            case 'prod':
                                env.K8S_CLUSTER = env.K8S_CLUSTER_PROD
                                env.APP_REPLICAS = '3'
                                env.RESOURCE_LIMITS_CPU = '2000m'
                                env.RESOURCE_LIMITS_MEMORY = '2Gi'
                                break
                            default:
                                error("Unknown environment: ${params.ENVIRONMENT}")
                        }
                    }
                    
                    echo """
üéØ Release Configuration:
   Environment: ${params.ENVIRONMENT}
   Strategy: ${params.DEPLOYMENT_STRATEGY}
   Target Version: ${env.TARGET_VERSION}
   Cluster: ${env.K8S_CLUSTER}
   Replicas: ${env.APP_REPLICAS}
   CPU Limit: ${env.RESOURCE_LIMITS_CPU}
   Memory Limit: ${env.RESOURCE_LIMITS_MEMORY}
   Run Migrations: ${params.RUN_MIGRATIONS}
   Performance Tests: ${params.RUN_PERFORMANCE_TESTS}
"""
                }
            }
        }

        stage('Image Verification') {
            when {
                expression { env.IS_ROLLBACK == 'false' }
            }
            steps {
                container('docker') {
                    script {
                        sh """
                            echo "üîç Verifying Docker image: ${DOCKER_IMAGE}:${params.IMAGE_TAG}"
                            
                            # Login to registry
                            echo \${DOCKER_PASSWORD} | docker login ${DOCKER_REGISTRY} -u \${DOCKER_USERNAME} --password-stdin
                            
                            # Pull and inspect image
                            docker pull ${DOCKER_IMAGE}:${params.IMAGE_TAG}
                            docker inspect ${DOCKER_IMAGE}:${params.IMAGE_TAG}
                            
                            # Verify image labels
                            docker inspect ${DOCKER_IMAGE}:${params.IMAGE_TAG} --format='{{range \$key, \$value := .Config.Labels}}{{printf "%s=%s\\n" \$key \$value}}{{end}}'
                        """
                    }
                }
            }
        }

        stage('Pre-Deployment Checks') {
            parallel {
                stage('Cluster Health Check') {
                    steps {
                        container('kubectl') {
                            script {
                                sh """
                                    echo "üè• Checking cluster health"
                                    
                                    # Configure kubectl for target cluster
                                    kubectl config use-context ${env.K8S_CLUSTER}
                                    
                                    # Check cluster nodes
                                    kubectl get nodes -o wide
                                    
                                    # Check namespace
                                    kubectl get namespace ${K8S_NAMESPACE} || kubectl create namespace ${K8S_NAMESPACE}
                                    
                                    # Check resource quotas
                                    kubectl describe quota -n ${K8S_NAMESPACE} || echo "No resource quotas defined"
                                    
                                    # Check existing deployments
                                    kubectl get deployments -n ${K8S_NAMESPACE} -l app=${APP_NAME} || echo "No existing deployment found"
                                """
                            }
                        }
                    }
                }

                stage('Database Connection Check') {
                    when {
                        expression { params.RUN_MIGRATIONS == true }
                    }
                    steps {
                        container('python') {
                            script {
                                sh """
                                    echo "üóÑÔ∏è Checking database connectivity"
                                    
                                    # Install database client libraries
                                    pip install psycopg2-binary pymongo redis
                                    
                                    # Test database connections based on environment
                                    python3 << 'EOF'
import os
import sys

def test_database_connection():
    try:
        # Add database connection tests here
        # This would be customized based on the specific database used
        print("‚úÖ Database connection test passed")
        return True
    except Exception as e:
        print(f"‚ùå Database connection test failed: {e}")
        return False

if not test_database_connection():
    sys.exit(1)
EOF
                                """
                            }
                        }
                    }
                }

                stage('Service Dependencies Check') {
                    steps {
                        container('kubectl') {
                            script {
                                sh """
                                    echo "üîó Checking service dependencies"
                                    
                                    # Check external services health
                                    {% if values.includeDatabase %}
                                    kubectl get pods -n ${K8S_NAMESPACE} -l app=database --field-selector=status.phase=Running || echo "Database not running"
                                    {% endif %}
                                    
                                    # Check Redis if enabled
                                    kubectl get pods -n ${K8S_NAMESPACE} -l app=redis --field-selector=status.phase=Running || echo "Redis not running"
                                    
                                    # Check message queue if enabled
                                    {% if values.includeCelery %}
                                    kubectl get pods -n ${K8S_NAMESPACE} -l app=rabbitmq --field-selector=status.phase=Running || echo "RabbitMQ not running"
                                    {% endif %}
                                """
                            }
                        }
                    }
                }
            }
        }

        {% if values.includeDatabase %}
        stage('Database Migration') {
            when {
                allOf {
                    expression { params.RUN_MIGRATIONS == true }
                    expression { env.IS_ROLLBACK == 'false' }
                }
            }
            steps {
                container('python') {
                    script {
                        sh """
                            echo "üóÑÔ∏è Running database migrations"
                            
                            # Create migration job
                            cat << 'EOF' > migration-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ${APP_NAME}-migration-${BUILD_NUMBER}
  namespace: ${K8S_NAMESPACE}
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: migration
        image: ${DOCKER_IMAGE}:${params.IMAGE_TAG}
        command: ["python"]
        args: ["manage.py", "migrate"]  # Django example
        env:
        - name: ENVIRONMENT
          value: "${params.ENVIRONMENT}"
        envFrom:
        - secretRef:
            name: ${APP_NAME}-secrets
        - configMapRef:
            name: ${APP_NAME}-config
  backoffLimit: 3
  activeDeadlineSeconds: ${DB_MIGRATION_TIMEOUT}
EOF
                            
                            # Apply migration job
                            kubectl apply -f migration-job.yaml
                            
                            # Wait for migration completion
                            kubectl wait --for=condition=complete job/${APP_NAME}-migration-${BUILD_NUMBER} -n ${K8S_NAMESPACE} --timeout=${DB_MIGRATION_TIMEOUT}s
                            
                            # Check migration logs
                            kubectl logs job/${APP_NAME}-migration-${BUILD_NUMBER} -n ${K8S_NAMESPACE}
                            
                            # Clean up migration job
                            kubectl delete job ${APP_NAME}-migration-${BUILD_NUMBER} -n ${K8S_NAMESPACE}
                        """
                    }
                }
            }
        }
        {% endif %}

        stage('Deployment') {
            steps {
                script {
                    if (params.DEPLOYMENT_STRATEGY == 'blue-green') {
                        deployBlueGreen()
                    } else if (params.DEPLOYMENT_STRATEGY == 'canary') {
                        deployCanary()
                    } else {
                        deployRolling()
                    }
                }
            }
        }

        stage('Post-Deployment Verification') {
            parallel {
                stage('Health Checks') {
                    when {
                        expression { params.SKIP_HEALTH_CHECKS == false }
                    }
                    steps {
                        container('kubectl') {
                            script {
                                sh """
                                    echo "üè• Running post-deployment health checks"
                                    
                                    # Wait for pods to be ready
                                    kubectl wait --for=condition=ready pod -l app=${APP_NAME} -n ${K8S_NAMESPACE} --timeout=300s
                                    
                                    # Get service endpoint
                                    SERVICE_IP=\$(kubectl get service ${APP_NAME} -n ${K8S_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                                    SERVICE_PORT=\$(kubectl get service ${APP_NAME} -n ${K8S_NAMESPACE} -o jsonpath='{.spec.ports[0].port}')
                                    
                                    if [ -z "\$SERVICE_IP" ]; then
                                        SERVICE_IP=\$(kubectl get service ${APP_NAME} -n ${K8S_NAMESPACE} -o jsonpath='{.spec.clusterIP}')
                                    fi
                                    
                                    echo "Testing health endpoint: http://\$SERVICE_IP:\$SERVICE_PORT${HEALTH_CHECK_PATH}"
                                    
                                    # Health check loop
                                    for i in \$(seq 1 30); do
                                        if curl -f -s http://\$SERVICE_IP:\$SERVICE_PORT${HEALTH_CHECK_PATH}; then
                                            echo "‚úÖ Health check passed"
                                            break
                                        else
                                            echo "‚è≥ Health check attempt \$i/30 failed, retrying in ${HEALTH_CHECK_INTERVAL}s..."
                                            sleep ${HEALTH_CHECK_INTERVAL}
                                        fi
                                        
                                        if [ \$i -eq 30 ]; then
                                            echo "‚ùå Health checks failed after 30 attempts"
                                            exit 1
                                        fi
                                    done
                                """
                            }
                        }
                    }
                }

                stage('Smoke Tests') {
                    steps {
                        container('python') {
                            script {
                                sh """
                                    echo "üß™ Running smoke tests"
                                    
                                    # Install test dependencies
                                    pip install requests pytest
                                    
                                    # Get service endpoint
                                    SERVICE_URL=\$(kubectl get service ${APP_NAME} -n ${K8S_NAMESPACE} -o jsonpath='http://{.status.loadBalancer.ingress[0].ip}:{.spec.ports[0].port}')
                                    
                                    if [ -z "\$SERVICE_URL" ] || [ "\$SERVICE_URL" = "http://:" ]; then
                                        SERVICE_IP=\$(kubectl get service ${APP_NAME} -n ${K8S_NAMESPACE} -o jsonpath='{.spec.clusterIP}')
                                        SERVICE_PORT=\$(kubectl get service ${APP_NAME} -n ${K8S_NAMESPACE} -o jsonpath='{.spec.ports[0].port}')
                                        SERVICE_URL="http://\$SERVICE_IP:\$SERVICE_PORT"
                                    fi
                                    
                                    echo "Running smoke tests against: \$SERVICE_URL"
                                    
                                    # Create smoke test script
                                    cat << 'EOF' > smoke_tests.py
import requests
import sys
import time

def test_health_endpoint():
    response = requests.get(f"{sys.argv[1]}${HEALTH_CHECK_PATH}")
    assert response.status_code == 200
    print("‚úÖ Health endpoint test passed")

def test_basic_functionality():
    # Add framework-specific tests
    {% if values.framework == 'fastapi' %}
    response = requests.get(f"{sys.argv[1]}/docs")
    assert response.status_code == 200
    print("‚úÖ FastAPI docs endpoint test passed")
    {% elif values.framework == 'django' %}
    response = requests.get(f"{sys.argv[1]}/admin/")
    assert response.status_code in [200, 302]
    print("‚úÖ Django admin endpoint test passed")
    {% elif values.framework == 'flask' %}
    response = requests.get(f"{sys.argv[1]}/")
    assert response.status_code == 200
    print("‚úÖ Flask root endpoint test passed")
    {% endif %}

if __name__ == "__main__":
    try:
        test_health_endpoint()
        test_basic_functionality()
        print("üéâ All smoke tests passed!")
    except Exception as e:
        print(f"‚ùå Smoke test failed: {e}")
        sys.exit(1)
EOF
                                    
                                    # Run smoke tests
                                    python smoke_tests.py \$SERVICE_URL
                                """
                            }
                        }
                    }
                }

                stage('Performance Tests') {
                    when {
                        expression { params.RUN_PERFORMANCE_TESTS == true }
                    }
                    steps {
                        container('python') {
                            script {
                                sh """
                                    echo "üöÄ Running performance tests"
                                    
                                    # Install locust for load testing
                                    pip install locust
                                    
                                    # Get service endpoint
                                    SERVICE_URL=\$(kubectl get service ${APP_NAME} -n ${K8S_NAMESPACE} -o jsonpath='http://{.status.loadBalancer.ingress[0].ip}:{.spec.ports[0].port}')
                                    
                                    if [ -z "\$SERVICE_URL" ] || [ "\$SERVICE_URL" = "http://:" ]; then
                                        SERVICE_IP=\$(kubectl get service ${APP_NAME} -n ${K8S_NAMESPACE} -o jsonpath='{.spec.clusterIP}')
                                        SERVICE_PORT=\$(kubectl get service ${APP_NAME} -n ${K8S_NAMESPACE} -o jsonpath='{.spec.ports[0].port}')
                                        SERVICE_URL="http://\$SERVICE_IP:\$SERVICE_PORT"
                                    fi
                                    
                                    # Create locust test file
                                    cat << 'EOF' > locustfile.py
from locust import HttpUser, task, between

class WebsiteUser(HttpUser):
    wait_time = between(1, 3)
    
    @task
    def health_check(self):
        self.client.get("${HEALTH_CHECK_PATH}")
    
    @task(3)
    def index_page(self):
        self.client.get("/")
EOF
                                    
                                    # Run performance test
                                    locust --headless --users ${PERFORMANCE_TEST_USERS} --spawn-rate 10 -H \$SERVICE_URL --run-time ${PERFORMANCE_TEST_DURATION} --html performance-report.html
                                """
                            }
                        }
                    }
                    post {
                        always {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: '.',
                                reportFiles: 'performance-report.html',
                                reportName: 'Performance Test Report',
                                reportTitles: 'Load Test Results'
                            ])
                        }
                    }
                }
            }
        }

        {% if values.enablePrometheus %}
        stage('Setup Monitoring') {
            steps {
                container('kubectl') {
                    script {
                        sh """
                            echo "üìä Setting up monitoring and alerts"
                            
                            # Create ServiceMonitor for Prometheus
                            cat << 'EOF' > servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ${APP_NAME}
  namespace: ${K8S_NAMESPACE}
  labels:
    app: ${APP_NAME}
spec:
  selector:
    matchLabels:
      app: ${APP_NAME}
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
EOF
                            
                            kubectl apply -f servicemonitor.yaml
                            
                            # Create PrometheusRule for alerts
                            cat << 'EOF' > prometheusrule.yaml
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: ${APP_NAME}-alerts
  namespace: ${K8S_NAMESPACE}
spec:
  groups:
  - name: ${APP_NAME}
    rules:
    - alert: ${APP_NAME}Down
      expr: up{job="${APP_NAME}"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "${APP_NAME} is down"
    - alert: ${APP_NAME}HighLatency
      expr: http_request_duration_seconds{job="${APP_NAME}"} > 1
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "${APP_NAME} high latency detected"
EOF
                            
                            kubectl apply -f prometheusrule.yaml
                        """
                    }
                }
            }
        }
        {% endif %}
    }

    post {
        always {
            script {
                // Create deployment summary
                sh """
                    echo "üìã Deployment Summary for ${APP_NAME}" > deployment-summary.txt
                    echo "=======================================" >> deployment-summary.txt
                    echo "Environment: ${params.ENVIRONMENT}" >> deployment-summary.txt
                    echo "Strategy: ${params.DEPLOYMENT_STRATEGY}" >> deployment-summary.txt
                    echo "Version: ${env.TARGET_VERSION}" >> deployment-summary.txt
                    echo "Build Number: ${BUILD_NUMBER}" >> deployment-summary.txt
                    echo "Deployment Status: \${currentBuild.currentResult}" >> deployment-summary.txt
                    echo "Duration: \${currentBuild.duration}ms" >> deployment-summary.txt
                    echo "Build URL: ${env.BUILD_URL}" >> deployment-summary.txt
                """
                
                archiveArtifacts artifacts: 'deployment-summary.txt', allowEmptyArchive: true
            }
        }
        
        success {
            script {
                echo "‚úÖ Deployment completed successfully!"
                // Send success notifications
            }
        }
        
        failure {
            script {
                echo "‚ùå Deployment failed!"
                
                // Automatic rollback on failure
                if (env.IS_ROLLBACK == 'false' && params.ENVIRONMENT == 'prod') {
                    echo "üîÑ Initiating automatic rollback..."
                    rollbackDeployment()
                }
            }
        }
        
        cleanup {
            script {
                echo "üßπ Cleaning up deployment resources"
            }
        }
    }
}

/**
 * Deploy using blue-green strategy
 */
def deployBlueGreen() {
    container('kubectl') {
        sh """
            echo "üîµüü¢ Deploying with blue-green strategy"
            
            # Determine current color
            CURRENT_COLOR=\$(kubectl get deployment ${APP_NAME} -n ${K8S_NAMESPACE} -o jsonpath='{.metadata.labels.color}' 2>/dev/null || echo "blue")
            NEW_COLOR=\$([ "\$CURRENT_COLOR" = "blue" ] && echo "green" || echo "blue")
            
            echo "Current color: \$CURRENT_COLOR"
            echo "New color: \$NEW_COLOR"
            
            # Deploy new version with new color
            helm upgrade --install ${APP_NAME}-\$NEW_COLOR ./helm-chart \\
                --namespace ${K8S_NAMESPACE} \\
                --set image.tag=${env.TARGET_VERSION} \\
                --set color=\$NEW_COLOR \\
                --set replicas=${env.APP_REPLICAS} \\
                --set resources.limits.cpu=${env.RESOURCE_LIMITS_CPU} \\
                --set resources.limits.memory=${env.RESOURCE_LIMITS_MEMORY} \\
                --wait --timeout=10m
            
            # Switch traffic to new color
            kubectl patch service ${APP_NAME} -n ${K8S_NAMESPACE} -p '{"spec":{"selector":{"color":"'\$NEW_COLOR'"}}}'
            
            # Wait and verify
            sleep 30
            
            # Clean up old deployment
            kubectl delete deployment ${APP_NAME}-\$CURRENT_COLOR -n ${K8S_NAMESPACE} --ignore-not-found=true
        """
    }
}

/**
 * Deploy using canary strategy
 */
def deployCanary() {
    container('kubectl') {
        sh """
            echo "üê§ Deploying with canary strategy"
            
            # Deploy canary version (10% traffic)
            helm upgrade --install ${APP_NAME}-canary ./helm-chart \\
                --namespace ${K8S_NAMESPACE} \\
                --set image.tag=${env.TARGET_VERSION} \\
                --set canary.enabled=true \\
                --set canary.weight=10 \\
                --set replicas=1 \\
                --wait --timeout=10m
            
            # Monitor canary for 5 minutes
            echo "Monitoring canary deployment for 5 minutes..."
            sleep 300
            
            # Check canary metrics (simplified check)
            # In real implementation, this would check error rates, latency, etc.
            
            # Promote canary to full deployment
            echo "Promoting canary to full deployment..."
            helm upgrade --install ${APP_NAME} ./helm-chart \\
                --namespace ${K8S_NAMESPACE} \\
                --set image.tag=${env.TARGET_VERSION} \\
                --set replicas=${env.APP_REPLICAS} \\
                --set resources.limits.cpu=${env.RESOURCE_LIMITS_CPU} \\
                --set resources.limits.memory=${env.RESOURCE_LIMITS_MEMORY} \\
                --wait --timeout=10m
            
            # Clean up canary
            helm uninstall ${APP_NAME}-canary --namespace ${K8S_NAMESPACE}
        """
    }
}

/**
 * Deploy using rolling update strategy
 */
def deployRolling() {
    container('helm') {
        sh """
            echo "üîÑ Deploying with rolling update strategy"
            
            helm upgrade --install ${APP_NAME} ./helm-chart \\
                --namespace ${K8S_NAMESPACE} \\
                --set image.tag=${env.TARGET_VERSION} \\
                --set replicas=${env.APP_REPLICAS} \\
                --set resources.limits.cpu=${env.RESOURCE_LIMITS_CPU} \\
                --set resources.limits.memory=${env.RESOURCE_LIMITS_MEMORY} \\
                --set strategy.type=RollingUpdate \\
                --set strategy.rollingUpdate.maxUnavailable=1 \\
                --set strategy.rollingUpdate.maxSurge=1 \\
                --wait --timeout=15m
        """
    }
}

/**
 * Rollback deployment
 */
def rollbackDeployment() {
    container('helm') {
        sh """
            echo "üîÑ Rolling back deployment"
            
            # Get previous revision
            PREVIOUS_REVISION=\$(helm history ${APP_NAME} -n ${K8S_NAMESPACE} --max 2 -o json | jq -r '.[0].revision')
            
            # Rollback to previous revision
            helm rollback ${APP_NAME} \$PREVIOUS_REVISION -n ${K8S_NAMESPACE} --wait --timeout=10m
            
            echo "Rollback completed to revision \$PREVIOUS_REVISION"
        """
    }
}
