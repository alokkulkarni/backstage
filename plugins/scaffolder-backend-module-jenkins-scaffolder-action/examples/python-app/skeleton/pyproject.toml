[tool.poetry]
name = "{{ values.name }}"
version = "{{ values.version | default('0.1.0') }}"
description = "{{ values.description }}"
authors = ["{{ values.owner }}"]
readme = "README.md"
packages = [{include = "{{ values.name | replace('-', '_') }}"}]

[tool.poetry.dependencies]
python = "^{{ values.pythonVersion | default('3.11') }}"
{% if values.framework == "fastapi" -%}
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
python-multipart = "^0.0.6"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
{%- elif values.framework == "django" -%}
Django = "^4.2.7"
djangorestframework = "^3.14.0"
django-cors-headers = "^4.3.1"
django-extensions = "^3.2.3"
django-filter = "^23.5"
djangorestframework-simplejwt = "^5.3.0"
{%- elif values.framework == "flask" -%}
Flask = "^3.0.0"
Flask-RESTful = "^0.3.10"
Flask-SQLAlchemy = "^3.1.1"
Flask-Migrate = "^4.0.5"
Flask-JWT-Extended = "^4.6.0"
Flask-CORS = "^4.0.0"
Flask-Redis = "^0.4.0"
Flask-Caching = "^2.1.0"
marshmallow = "^3.20.1"
{%- endif %}
redis = "^5.0.1"
sqlalchemy = "^2.0.23"
alembic = "^1.13.1"
psycopg2-binary = "^2.9.9"
celery = "^5.3.4"
requests = "^2.31.0"
httpx = "^0.25.2"
python-dotenv = "^1.0.0"
PyYAML = "^6.0.1"
jsonschema = "^4.20.0"
prometheus-client = "^0.19.0"
structlog = "^23.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
pytest-benchmark = "^4.0.0"
factory-boy = "^3.3.0"
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
pylint = "^3.0.3"
mypy = "^1.7.1"
bandit = "^1.7.5"
safety = "^2.3.5"
pre-commit = "^3.6.0"
sphinx = "^7.2.6"
sphinx-rtd-theme = "^1.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["{{ values.name | replace('-', '_') }}"]

[tool.mypy]
python_version = "{{ values.pythonVersion | default('3.11') }}"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov={{ values.name | replace('-', '_') }} --cov-report=term-missing --cov-report=xml"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["{{ values.name | replace('-', '_') }}"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
