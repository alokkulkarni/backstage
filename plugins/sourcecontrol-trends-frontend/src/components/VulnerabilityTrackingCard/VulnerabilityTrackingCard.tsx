import React, { useState, useEffect } from 'react';
import { 
  Card, 
  CardContent, 
  Typography, 
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow, 
  Paper, 
  Chip, 
  LinearProgress,
  Grid,
  Box
} from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import { Alert } from '@material-ui/lab';
import { 
  Warning as WarningIcon,
  Error as ErrorIcon,
  Info as InfoIcon,
  CheckCircle as CheckCircleIcon
} from '@material-ui/icons';
import { 
  PieChart, 
  Pie, 
  Cell, 
  ResponsiveContainer, 
  Tooltip as RechartsTooltip,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid
} from 'recharts';
import { useApi } from '@backstage/core-plugin-api';
import { sourceControlTrendsApiRef } from '../../api/SourceControlTrendsApiRef';
import { SourceControlVulnerability } from '../../types';

const useStyles = makeStyles((theme) => ({
  card: {
    marginBottom: theme.spacing(2),
  },
  tableContainer: {
    maxHeight: 400,
  },
  severityChip: {
    fontWeight: 'bold',
  },
  critical: {
    backgroundColor: theme.palette.error.main,
    color: theme.palette.error.contrastText,
  },
  high: {
    backgroundColor: '#ff9800',
    color: '#fff',
  },
  medium: {
    backgroundColor: '#ffeb3b',
    color: '#000',
  },
  low: {
    backgroundColor: theme.palette.success.main,
    color: theme.palette.success.contrastText,
  },
  metricCard: {
    textAlign: 'center',
    padding: theme.spacing(2),
    backgroundColor: theme.palette.background.default,
    borderRadius: theme.shape.borderRadius,
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
  },
  metricValue: {
    fontSize: '1.5rem',
    fontWeight: 'bold',
    marginBottom: theme.spacing(1),
  },
  metricLabel: {
    color: theme.palette.text.secondary,
  },
  chartContainer: {
    height: 300,
    marginTop: theme.spacing(2),
  },
}));

const SEVERITY_COLORS = {
  critical: '#f44336',
  high: '#ff9800',
  medium: '#ffeb3b',
  low: '#4caf50',
};

export const VulnerabilityTrackingCard: React.FC = () => {
  const classes = useStyles();
  const [vulnerabilities, setVulnerabilities] = useState<SourceControlVulnerability[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const api = useApi(sourceControlTrendsApiRef);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        // Note: This would need to be implemented in the API
        // For now, using empty data to fix compilation
        setVulnerabilities([]);
        setError(null);
      } catch (err) {
        setError(typeof err === 'string' ? err : 'Failed to fetch vulnerabilities');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [api]);

  if (loading) {
    return (
      <Card className={classes.card}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            Security Vulnerabilities
          </Typography>
          <LinearProgress />
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className={classes.card}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            Security Vulnerabilities
          </Typography>
          <Alert severity="error">
            Failed to load vulnerabilities: {error}
          </Alert>
        </CardContent>
      </Card>
    );
  }

  // Calculate vulnerability statistics
  const totalVulns = vulnerabilities.length;
  const criticalCount = vulnerabilities.filter((v: SourceControlVulnerability) => v.severity === 'critical').length;
  const highCount = vulnerabilities.filter((v: SourceControlVulnerability) => v.severity === 'high').length;
  const mediumCount = vulnerabilities.filter((v: SourceControlVulnerability) => v.severity === 'medium').length;
  const lowCount = vulnerabilities.filter((v: SourceControlVulnerability) => v.severity === 'low').length;

  // Prepare data for charts
  const severityData = [
    { name: 'Critical', value: criticalCount, color: SEVERITY_COLORS.critical },
    { name: 'High', value: highCount, color: SEVERITY_COLORS.high },
    { name: 'Medium', value: mediumCount, color: SEVERITY_COLORS.medium },
    { name: 'Low', value: lowCount, color: SEVERITY_COLORS.low },
  ].filter(item => item.value > 0);

  // Group vulnerabilities by repository for bar chart
  const repoVulnData = vulnerabilities.reduce((acc: any, vuln: SourceControlVulnerability) => {
    const repoName = vuln.repositoryId || 'Unknown';
    if (!acc[repoName]) {
      acc[repoName] = { name: repoName, critical: 0, high: 0, medium: 0, low: 0 };
    }
    acc[repoName][vuln.severity as keyof typeof acc[typeof repoName]]++;
    return acc;
  }, {} as Record<string, any>);

  const repoChartData = Object.values(repoVulnData).slice(0, 10); // Top 10 repos

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <ErrorIcon style={{ color: SEVERITY_COLORS.critical }} />;
      case 'high':
        return <WarningIcon style={{ color: SEVERITY_COLORS.high }} />;
      case 'medium':
        return <InfoIcon style={{ color: SEVERITY_COLORS.medium }} />;
      case 'low':
        return <CheckCircleIcon style={{ color: SEVERITY_COLORS.low }} />;
      default:
        return <InfoIcon />;
    }
  };

  const getSeverityClass = (severity: string) => {
    switch (severity) {
      case 'critical':
        return classes.critical;
      case 'high':
        return classes.high;
      case 'medium':
        return classes.medium;
      case 'low':
        return classes.low;
      default:
        return '';
    }
  };

  return (
    <Card className={classes.card}>
      <CardContent>
        <Typography variant="h6" gutterBottom>
          Security Vulnerabilities ({totalVulns})
        </Typography>
        
        {/* Summary Metrics */}
        <Grid container spacing={2} style={{ marginBottom: 24 }}>
          <Grid item xs={12} sm={3}>
            <Box className={classes.metricCard}>
              <ErrorIcon style={{ color: SEVERITY_COLORS.critical, fontSize: '2rem' }} />
              <Typography className={classes.metricValue} style={{ color: SEVERITY_COLORS.critical }}>
                {criticalCount}
              </Typography>
              <Typography className={classes.metricLabel}>
                Critical
              </Typography>
            </Box>
          </Grid>
          
          <Grid item xs={12} sm={3}>
            <Box className={classes.metricCard}>
              <WarningIcon style={{ color: SEVERITY_COLORS.high, fontSize: '2rem' }} />
              <Typography className={classes.metricValue} style={{ color: SEVERITY_COLORS.high }}>
                {highCount}
              </Typography>
              <Typography className={classes.metricLabel}>
                High
              </Typography>
            </Box>
          </Grid>
          
          <Grid item xs={12} sm={3}>
            <Box className={classes.metricCard}>
              <InfoIcon style={{ color: SEVERITY_COLORS.medium, fontSize: '2rem' }} />
              <Typography className={classes.metricValue} style={{ color: SEVERITY_COLORS.medium }}>
                {mediumCount}
              </Typography>
              <Typography className={classes.metricLabel}>
                Medium
              </Typography>
            </Box>
          </Grid>
          
          <Grid item xs={12} sm={3}>
            <Box className={classes.metricCard}>
              <CheckCircleIcon style={{ color: SEVERITY_COLORS.low, fontSize: '2rem' }} />
              <Typography className={classes.metricValue} style={{ color: SEVERITY_COLORS.low }}>
                {lowCount}
              </Typography>
              <Typography className={classes.metricLabel}>
                Low
              </Typography>
            </Box>
          </Grid>
        </Grid>

        {/* Charts */}
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <Typography variant="subtitle1" gutterBottom>
              Vulnerabilities by Severity
            </Typography>
            <Box className={classes.chartContainer}>
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={severityData}
                    cx="50%"
                    cy="50%"
                    innerRadius={60}
                    outerRadius={120}
                    paddingAngle={5}
                    dataKey="value"
                  >
                    {severityData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <RechartsTooltip />
                </PieChart>
              </ResponsiveContainer>
            </Box>
          </Grid>

          <Grid item xs={12} md={6}>
            <Typography variant="subtitle1" gutterBottom>
              Top Repositories by Vulnerabilities
            </Typography>
            <Box className={classes.chartContainer}>
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={repoChartData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" angle={-45} textAnchor="end" height={100} />
                  <YAxis />
                  <RechartsTooltip />
                  <Bar dataKey="critical" stackId="a" fill={SEVERITY_COLORS.critical} />
                  <Bar dataKey="high" stackId="a" fill={SEVERITY_COLORS.high} />
                  <Bar dataKey="medium" stackId="a" fill={SEVERITY_COLORS.medium} />
                  <Bar dataKey="low" stackId="a" fill={SEVERITY_COLORS.low} />
                </BarChart>
              </ResponsiveContainer>
            </Box>
          </Grid>
        </Grid>

        {/* Vulnerability List */}
        <Typography variant="subtitle1" gutterBottom style={{ marginTop: 32 }}>
          Recent Vulnerabilities
        </Typography>
        <TableContainer component={Paper} className={classes.tableContainer}>
          <Table stickyHeader size="small">
            <TableHead>
              <TableRow>
                <TableCell>Repository</TableCell>
                <TableCell>Vulnerability</TableCell>
                <TableCell align="center">Severity</TableCell>
                <TableCell>Package</TableCell>
                <TableCell>Detected</TableCell>
                <TableCell>Status</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {vulnerabilities.slice(0, 20).map((vuln: SourceControlVulnerability) => (
                <TableRow key={vuln.id} hover>
                  <TableCell>{vuln.repositoryId}</TableCell>
                  <TableCell>
                    <Typography variant="subtitle2">
                      {vuln.alertId}
                    </Typography>
                    {vuln.description && (
                      <Typography variant="caption" color="textSecondary">
                        {vuln.description.length > 60 
                          ? `${vuln.description.substring(0, 60)}...`
                          : vuln.description
                        }
                      </Typography>
                    )}
                  </TableCell>
                  <TableCell align="center">
                    <Chip
                      icon={getSeverityIcon(vuln.severity)}
                      label={vuln.severity.toUpperCase()}
                      size="small"
                      className={`${classes.severityChip} ${getSeverityClass(vuln.severity)}`}
                    />
                  </TableCell>
                  <TableCell>{vuln.packageName || 'N/A'}</TableCell>
                  <TableCell>
                    {new Date(vuln.createdAt).toLocaleDateString()}
                  </TableCell>
                  <TableCell>
                    <Chip
                      label={vuln.state}
                      size="small"
                      color={vuln.state === 'fixed' ? 'primary' : 'default'}
                      variant="outlined"
                    />
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </CardContent>
    </Card>
  );
};
